class FSEMainController : FSEFlowDelegate
{
	private declare didFinishEventSenderIdentfier : RiseBultInClasses.String
	private declare stateMachine : FSEStateMachine
	private declare tapController : IKTapController
	public declare delegate : FSEMainControllerDelegate

	public method initialize(with tapController : IKTapController)
	{
		this.tapController = tapController

		stateMachine = new FSEStateMachine()
		stateMachine.initialize();
	}

	public method register(iterable : FSEIterable, for state : RiseBuiltInClasses.String)
	{
		stateMachine.register(iterable : iterable, for state : state)
	}

	public method start(from state : RiseBuiltInClasses.String)
	{
		didFinishEventSenderIdentfier = null

		stateMachine.state = state

		window.requestAnimationFrame(mainLoop);
	}

	public method step() 
	{
		declare iterable = this.stateMachine.iterable()

		if (iterable != null)
		{
			tapController.delegate = iterable
			iterable.flowDelegate = this

			iterable.step()

			if (didFinishEventSenderIdentfier == null)
			{
				window.requestAnimationFrame(mainLoop)
			}
			else
			{
				declare didFinishEventSenderIdentfier = this.didFinishEventSenderIdentfier
				delegate.mainControllerDidFinishEvent(controller : this, with senderIdentifier : didFinishEventSenderIdentfier)
			}
		}
		else
		{
			RiseBuiltInMethods.print("Bye-Bye!")
		}
	}

	public method didFinishEvent(from sender : FSEIdentifiable)
	{
		didFinishEventSenderIdentfier = sender.identifier
	}

}

public method mainLoop()
{

	globalMainController.step()

}